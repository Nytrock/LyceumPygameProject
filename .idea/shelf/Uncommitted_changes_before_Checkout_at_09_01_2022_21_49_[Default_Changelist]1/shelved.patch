Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\r\n\r\nimport pygame\r\nimport os\r\nimport random\r\n\r\ntypes_coords = {'O': ([(0, 0), (-1, 0), (0, 1), (-1, 1)], 1),\r\n                'I': ([(0, 0), (-1, 0), (-2, 0), (1, 0)], 2),\r\n                'S': ([(0, 0), (1, 0), (0, 1), (-1, 1)], 3),\r\n                'Z': ([(0, 0), (-1, 0), (0, 1), (1, 1)], 4),\r\n                'L': ([(0, 0), (-1, 0), (-1, 1), (1, 0)], 5),\r\n                'J': ([(0, 0), (-1, 0), (1, 1), (1, 0)], 6),\r\n                'T': ([(0, 0), (-1, 0), (0, 1), (1, 0)], 7)}\r\ntypes_rotations = {'O': [[(0, 0), (-1, 0), (0, 1), (-1, 1)]],\r\n                   'I': [[(0, 0), (-1, 0), (-2, 0), (1, 0)], [(0, 0), (0, 1), (0, 2), (0, -1)]],\r\n                   'S': [[(0, 0), (1, 0), (0, 1), (-1, 1)], [(0, 0), (1, 0), (0, -1), (1, 1)]],\r\n                   'Z': [[(0, 0), (-1, 0), (0, 1), (1, 1)], [(0, 0), (1, 0), (1, -1), (0, 1)]],\r\n                   'L': [[(0, 0), (-1, 0), (-1, 1), (1, 0)], [(0, 0), (0, 1), (-1, -1), (0, -1)],\r\n                         [(0, 0), (-1, 0), (1, -1), (1, 0)], [(0, 0), (0, 1), (1, 1), (0, -1)]],\r\n                   'J': [[(0, 0), (-1, 0), (1, 1), (1, 0)], [(0, 0), (0, 1), (-1, 1), (0, -1)],\r\n                         [(0, 0), (-1, 0), (-1, -1), (1, 0)], [(0, 0), (0, 1), (1, -1), (0, -1)]],\r\n                   'T': [[(0, 0), (-1, 0), (0, 1), (1, 0)], [(0, 0), (0, -1), (0, 1), (-1, 0)],\r\n                         [(0, 0), (-1, 0), (0, -1), (1, 0)], [(0, 0), (0, -1), (0, 1), (1, 0)]]}\r\n\r\n\r\ndef load_image(name, color_key=None):\r\n    fullname = os.path.join('data', name)\r\n    try:\r\n        image = pygame.image.load(fullname)\r\n    except pygame.error as message:\r\n        print('Не удаётся загрузить:', name)\r\n        raise SystemExit(message)\r\n    image = image.convert_alpha()\r\n    if color_key is not None:\r\n        if color_key == -1:\r\n            color_key = image.get_at((0, 0))\r\n        image.set_colorkey(color_key)\r\n    return image\r\n\r\n\r\nclass SpriteGroup(pygame.sprite.Group):\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n\r\n    def get_event(self, even):\r\n        for sprite in self:\r\n            sprite.get_event(even)\r\n\r\n\r\nclass Sprite(pygame.sprite.Sprite):\r\n\r\n    def __init__(self, group):\r\n        super().__init__(group)\r\n        self.rect = None\r\n\r\n    def get_event(self, even):\r\n        pass\r\n\r\n\r\nclass Board:\r\n    def __init__(self, width, height):\r\n        self.width = width\r\n        self.height = height\r\n        self.board = [[0] * width for _ in range(height)]\r\n        self.left = 10\r\n        self.top = 10\r\n        self.cell_size = 30\r\n\r\n    def set_view(self, left, topi, cell_size):\r\n        self.left = left\r\n        self.top = topi\r\n        self.cell_size = cell_size\r\n\r\n    def test_render(self, scree):\r\n        colors = [pygame.Color(\"Black\"), pygame.Color(\"Yellow\"), pygame.Color(\"Cyan\"), pygame.Color(\"Green\"),\r\n                  pygame.Color(\"Red\"), pygame.Color(\"Orange\"), pygame.Color(\"Blue\"), pygame.Color(\"Purple\")]\r\n        for y in range(self.height):\r\n            for x in range(self.width):\r\n                pygame.draw.rect(scree, colors[self.board[y][x]], (\r\n                    x * self.cell_size + self.left, y * self.cell_size + self.top, self.cell_size,\r\n                    self.cell_size))\r\n                pygame.draw.rect(scree, pygame.Color(\"white\"), (\r\n                    x * self.cell_size + self.left, y * self.cell_size + self.top, self.cell_size,\r\n                    self.cell_size), 1)\r\n\r\n    def change_board(self, list_, coords, num):\r\n        x, y = coords\r\n        for elem in list_:\r\n            self.board[y + elem[1]][x + elem[0]] = num\r\n\r\n    def scan_down(self, list_, coords):\r\n        free_cubes = []\r\n        for elem in list_:\r\n            if (elem[0], elem[1] + 1) not in list_:\r\n                free_cubes.append(elem)\r\n        for elem in free_cubes:\r\n            if coords[1] + elem[1] + 1 >= len(self.board):\r\n                return False\r\n            if self.board[coords[1] + elem[1] + 1][coords[0] + elem[0]] != 0:\r\n                return False\r\n        return True\r\n\r\n    @staticmethod\r\n    def scan_up(list_, coords):\r\n        free_cubes = []\r\n        for elem in list_:\r\n            if (elem[0], elem[1] - 1) not in list_:\r\n                free_cubes.append(elem)\r\n        for elem in free_cubes:\r\n            if coords[1] + elem[1] - 1 < 3:\r\n                return True\r\n        return False\r\n\r\n    def Check_Rotate(self, list_, coords, num):\r\n        for elem in list_:\r\n            if 0 <= coords[1] + elem[1] <= len(self.board) - 1 and \\\r\n                    0 <= coords[0] + elem[0] <= len(self.board[0]) - 1:\r\n                if self.board[coords[1] + elem[1]][coords[0] + elem[0]] != 0 and \\\r\n                        self.board[coords[1] + elem[1]][coords[0] + elem[0]] != num:\r\n                    return False\r\n            else:\r\n                return False\r\n        return True\r\n\r\n    def Scan_Left(self, list_, coords, num):\r\n        for elem in list_:\r\n            if coords[0] + elem[0] - 1 < 0:\r\n                return False\r\n            if self.board[coords[1] + elem[1]][coords[0] + elem[0] - 1] != num and \\\r\n                self.board[coords[1] + elem[1]][coords[0] + elem[0] - 1] != 0:\r\n                return False\r\n        return True\r\n\r\n    def Scan_Right(self, list_, coords, num):\r\n        for elem in list_:\r\n            if coords[0] + elem[0] + 1 >= len(self.board[0]):\r\n                return False\r\n            if self.board[coords[1] + elem[1]][coords[0] + elem[0] + 1] != num and \\\r\n                self.board[coords[1] + elem[1]][coords[0] + elem[0] + 1] != 0:\r\n                return False\r\n        return True\r\n\r\n\r\nclass Figure:\r\n    def __init__(self, name=\"\", Next=False):\r\n        if name == \"\":\r\n            self.name = random.choice(list(types_coords.keys()))\r\n        else:\r\n            self.name = name\r\n        self.dx = 0\r\n        self.coords, self.color = types_coords[self.name]\r\n        self.sprites = []\r\n        self.Stop = False\r\n        self.num_rotation = 0\r\n        if not Next:\r\n            self.x, self.y = 5, 1\r\n            for elem in self.coords:\r\n                self.sprites.append(Figure_Sprite(self.name, elem, self.x, self.y, board))\r\n            self.update()\r\n        else:\r\n            self.x, self.y = 2, 0\r\n            for elem in self.coords:\r\n                self.sprites.append(Figure_Sprite(self.name, elem, self.x, self.y, board))\r\n            board_next.change_board(self.coords, (self.x, self.y), self.color)\r\n            for elem in range(len(self.sprites)):\r\n                self.sprites[elem].Move(self.coords[elem], self.x, self.y, board_next)\r\n                self.sprites[elem].image = pygame.transform.scale(self.sprites[elem].image, (35, 35))\r\n\r\n    def update(self):\r\n        if board.scan_down(self.coords, (self.x, self.y)):\r\n            board.change_board(self.coords, (self.x, self.y), 0)\r\n            self.y += 1\r\n            for elem in range(len(self.sprites)):\r\n                self.sprites[elem].Move(self.coords[elem], self.x, self.y, board)\r\n            board.change_board(self.coords, (self.x, self.y), self.color)\r\n        else:\r\n            self.Stop = True\r\n\r\n    def Lose(self):\r\n        if board.scan_up(self.coords, (self.x, self.y)):\r\n            return True\r\n        return False\r\n\r\n    def Rotate(self, num):\r\n        if board.scan_down(self.coords, (self.x, self.y)):\r\n            rotations = types_rotations[self.name]\r\n            self.num_rotation = (self.num_rotation + num) % (len(rotations))\r\n            if board.Check_Rotate(rotations[self.num_rotation], (self.x, self.y), self.color):\r\n                board.change_board(self.coords, (self.x, self.y), 0)\r\n                self.coords = rotations[self.num_rotation]\r\n                board.change_board(self.coords, (self.x, self.y), self.color)\r\n                for elem in range(len(self.sprites)):\r\n                    self.sprites[elem].Move(self.coords[elem], self.x, self.y, board)\r\n\r\n    def Move(self, vector):\r\n        if vector == \"down\" and board.scan_down(self.coords, (self.x, self.y)):\r\n            board.change_board(self.coords, (self.x, self.y), 0)\r\n            self.y += 1\r\n            board.change_board(self.coords, (self.x, self.y), self.color)\r\n        elif vector == 'left' and board.Scan_Left(self.coords, (self.x, self.y), self.color):\r\n            board.change_board(self.coords, (self.x, self.y), 0)\r\n            self.x -= 1\r\n            board.change_board(self.coords, (self.x, self.y), self.color)\r\n        elif vector == 'right' and board.Scan_Right(self.coords, (self.x, self.y), self.color):\r\n            board.change_board(self.coords, (self.x, self.y), 0)\r\n            self.x += 1\r\n            board.change_board(self.coords, (self.x, self.y), self.color)\r\n        for elem in range(len(self.sprites)):\r\n            self.sprites[elem].Move(self.coords[elem], self.x, self.y, board)\r\n\r\n    def Out_next(self):\r\n        for elem in self.sprites:\r\n            Figures_sprites.remove(elem)\r\n        self.sprites.clear()\r\n\r\n\r\nclass Figure_Sprite(Sprite):\r\n    def __init__(self, name, coord, x, y, game_board):\r\n        super().__init__(Figures_sprites)\r\n        self.image = pygame.transform.scale(load_image(name + \"-block.png\"), (42, 42))\r\n        self.rect = self.image.get_rect().move(game_board.left + (x + coord[0]) * game_board.cell_size,\r\n                                               game_board.top + (y + coord[1]) * game_board.cell_size)\r\n\r\n    def Move(self, coord, x, y, game_board):\r\n        self.rect = self.image.get_rect().move(game_board.left + (x + coord[0]) * game_board.cell_size,\r\n                                               game_board.top + (y + coord[1]) * game_board.cell_size)\r\n\r\n\r\ndef Check_Board():\r\n    num = []\r\n    for elem in range(len(board.board)):\r\n        if 0 not in board.board[elem]:\r\n            num.append(elem)\r\n            up = board.board[:elem]\r\n            down = board.board[elem + 1:]\r\n            board.board = [list(map(lambda x: 0, board.board[elem]))] + up + down\r\n    if num:\r\n        return num\r\n    return []\r\n\r\n\r\ndef Create_Archive():\r\n    pass\r\n\r\n\r\ndef terminate():\r\n    pygame.quit()\r\n    sys.exit()\r\n\r\n\r\ndef start_screen():\r\n    intro_text = [\"УПРАВЛЕНИЕ\", \"\",\r\n                  \"Стрелки влево и вправо - перемещение фигуры влево-вправо\",\r\n                  \"Стрелка вверх - разворот фигуры по часовой стрелке\",\r\n                  \"z - разворот фигуры против часовой стрелки\",\r\n                  \"Стрелка Вниз - опустить фигуру вниз на 1 клетку\",\r\n                  \"Пробел - опустить фигуру полностью\",\r\n                  \"Левый Shift - отложить фигуру на хранение\"]\r\n\r\n    fon = pygame.transform.scale(load_image('Start.jpg'), (590, 960))\r\n    screen.blit(fon, (0, 0))\r\n    Font = pygame.font.Font('data/Font.ttf', 18)\r\n    text_coord = 350\r\n    for line in intro_text:\r\n        string_render = Font.render(line, True, (254, 236, 174))\r\n        intro_rect = string_render.get_rect()\r\n        text_coord += 15\r\n        intro_rect.top = text_coord\r\n        intro_rect.x = 50\r\n        text_coord += intro_rect.height\r\n        screen.blit(string_render, intro_rect)\r\n\r\n    while True:\r\n        for even in pygame.event.get():\r\n            if even.type == pygame.QUIT:\r\n                terminate()\r\n            elif even.type == pygame.KEYDOWN or \\\r\n                    even.type == pygame.MOUSEBUTTONDOWN:\r\n                return\r\n        pygame.display.flip()\r\n        clock.tick(60)\r\n\r\n\r\nif __name__ == '__main__':\r\n    Figures_sprites = SpriteGroup()\r\n    pygame.init()\r\n    size = (590, 960)\r\n    screen = pygame.display.set_mode(size)\r\n    board = Board(10, 24)\r\n    board.set_view(15, -40, 41)\r\n\r\n    board_next = Board(4, 2)\r\n    board_next.set_view(435, 200, 34)\r\n\r\n    running = True\r\n    clock = pygame.time.Clock()\r\n    pygame.time.set_timer(pygame.USEREVENT, 500)\r\n\r\n    start_screen()\r\n\r\n    pygame.mixer.music.load('data/Background.mp3')\r\n    pygame.mixer.music.play(loops=-1)\r\n    pygame.mixer.music.play()\r\n    pygame.mixer.music.set_volume(0.1)\r\n\r\n    score = 0\r\n    sl = {1: 40, 2: 100, 3: 300, 4: 1200}\r\n    fldown = False\r\n    background = load_image('Background.jpg')\r\n    top = load_image('Top.png')\r\n\r\n    Main_Figure = Figure()\r\n    Archive_Figure = None\r\n    Next_Figure = Figure(Next=True)\r\n    while running:\r\n        font = pygame.font.Font(\"data/Font.ttf\", 23)\r\n        endGame = pygame.font.Font(\"data/Font.ttf\", 23)\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                running = False\r\n            if event.type == pygame.USEREVENT and not Main_Figure.Stop:\r\n                Main_Figure.update()\r\n            elif event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_UP:\r\n                    Main_Figure.Rotate(1)\r\n                elif event.key == pygame.K_z:\r\n                    Main_Figure.Rotate(-1)\r\n                elif event.key == pygame.K_DOWN:\r\n                    Main_Figure.Move(\"down\")\r\n                    if board.scan_down(Main_Figure.coords, (Main_Figure.x, Main_Figure.y)):\r\n                        score += 1\r\n                elif event.key == pygame.K_LEFT:\r\n                    Main_Figure.Move(\"left\")\r\n                elif event.key == pygame.K_RIGHT:\r\n                    Main_Figure.Move(\"right\")\r\n                elif event.key == pygame.K_LSHIFT:\r\n                    Create_Archive()\r\n                elif event.key == pygame.K_SPACE:\r\n                    fldown = True\r\n            elif event.type == pygame.KEYUP:\r\n                if event.key == pygame.K_SPACE:\r\n                    fldown = False\r\n        screen.blit(background, (0, 0))\r\n        if fldown:\r\n            if board.scan_down(Main_Figure.coords, (Main_Figure.x, Main_Figure.y)):\r\n                board.change_board(Main_Figure.coords, (Main_Figure.x, Main_Figure.y), 0)\r\n                Main_Figure.y += 1\r\n                board.change_board(Main_Figure.coords, (Main_Figure.x, Main_Figure.y), Main_Figure.color)\r\n                for i in range(len(Main_Figure.sprites)):\r\n                    Main_Figure.sprites[i].Move(Main_Figure.coords[i], Main_Figure.x, Main_Figure.y, board)\r\n                score += 1\r\n\r\n        if not Main_Figure.Stop:\r\n            string_rendered = endGame.render(str(score), True, (254, 236, 174))\r\n            screen.blit(string_rendered, pygame.Rect(535, 98, 0, 0))\r\n        if Main_Figure.Stop:\r\n            if not Main_Figure.Lose():\r\n                new_score = Check_Board()\r\n                if new_score:\r\n                    score += sl[len(new_score)]\r\n                    for i in Figures_sprites:\r\n                        if (i.rect.y - board.top) // 41 in new_score:\r\n                            Figures_sprites.remove(i)\r\n                        elif (i.rect.y - board.top) // 41 < max(new_score):\r\n                            i.rect = pygame.Rect(i.rect.x, i.rect.y + 41 * len(new_score), 42, 42)\r\n                Main_Figure = Figure(name=Next_Figure.name)\r\n                Next_Figure.Out_next()\r\n                Next_Figure = Figure(Next=True)\r\n            else:\r\n                endGame = pygame.font.Font(\"data/Font.ttf\", 116)\r\n                string_rendered = endGame.render(\"You Lose\", True, (254, 236, 174))\r\n                screen.blit(string_rendered, pygame.Rect(0, 400, 0, 0))\r\n                endGame = pygame.font.Font(\"data/Font.ttf\", 58)\r\n                string_rendered = endGame.render(\"Score: \" + str(score), True, (220, 236, 174))\r\n                screen.blit(string_rendered, pygame.Rect(200, 500, 0, 0))\r\n        Figures_sprites.draw(screen)\r\n        screen.blit(top, (0, 0))\r\n        clock.tick(60)\r\n        pygame.display.flip()\r\n    pygame.quit()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision c9e636252673f91ca01e33e8d09eaaba7fb5b0cc)
+++ b/main.py	(date 1641754180703)
@@ -128,7 +128,7 @@
             if coords[0] + elem[0] - 1 < 0:
                 return False
             if self.board[coords[1] + elem[1]][coords[0] + elem[0] - 1] != num and \
-                self.board[coords[1] + elem[1]][coords[0] + elem[0] - 1] != 0:
+                    self.board[coords[1] + elem[1]][coords[0] + elem[0] - 1] != 0:
                 return False
         return True
 
@@ -137,7 +137,7 @@
             if coords[0] + elem[0] + 1 >= len(self.board[0]):
                 return False
             if self.board[coords[1] + elem[1]][coords[0] + elem[0] + 1] != num and \
-                self.board[coords[1] + elem[1]][coords[0] + elem[0] + 1] != 0:
+                    self.board[coords[1] + elem[1]][coords[0] + elem[0] + 1] != 0:
                 return False
         return True
 
@@ -240,8 +240,10 @@
     return []
 
 
-def Create_Archive():
-    pass
+def Create_Archive(Main):
+    Archive_Figure = Main
+    if schet == 0:
+        Main_Figure = Next_Figure
 
 
 def terminate():
@@ -285,6 +287,7 @@
 if __name__ == '__main__':
     Figures_sprites = SpriteGroup()
     pygame.init()
+    schet = 0
     size = (590, 960)
     screen = pygame.display.set_mode(size)
     board = Board(10, 24)
@@ -335,7 +338,14 @@
                 elif event.key == pygame.K_RIGHT:
                     Main_Figure.Move("right")
                 elif event.key == pygame.K_LSHIFT:
-                    Create_Archive()
+                    if schet == 0:
+                        Archive_Figure = Main_Figure
+                        Main_Figure = Figure(name=Next_Figure.name)
+                        Next_Figure.Out_next()
+                        Next_Figure = Figure(Next=True)
+                    elif schet == 1:
+                        Archive_Figure, Main_Figure = Main_Figure, Archive_Figure
+                    schet += 1
                 elif event.key == pygame.K_SPACE:
                     fldown = True
             elif event.type == pygame.KEYUP:
@@ -368,8 +378,8 @@
                 Next_Figure.Out_next()
                 Next_Figure = Figure(Next=True)
             else:
-                endGame = pygame.font.Font("data/Font.ttf", 116)
-                string_rendered = endGame.render("You Lose", True, (254, 236, 174))
+                endGame = pygame.font.Font("data/Font.ttf", 95)
+                string_rendered = endGame.render("Game over", True, (254, 236, 174))
                 screen.blit(string_rendered, pygame.Rect(0, 400, 0, 0))
                 endGame = pygame.font.Font("data/Font.ttf", 58)
                 string_rendered = endGame.render("Score: " + str(score), True, (220, 236, 174))
