Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\r\n\r\nimport pygame\r\nimport os\r\nimport random\r\n\r\ntypes_coords = {'O': ([(0, 0), (-1, 0), (0, 1), (-1, 1)], 1),\r\n                'I': ([(0, 0), (-1, 0), (-2, 0), (1, 0)], 2),\r\n                'S': ([(0, 0), (1, 0), (0, 1), (-1, 1)], 3),\r\n                'Z': ([(0, 0), (-1, 0), (0, 1), (1, 1)], 4),\r\n                'L': ([(0, 0), (-1, 0), (-1, 1), (1, 0)], 5),\r\n                'J': ([(0, 0), (-1, 0), (1, 1), (1, 0)], 6),\r\n                'T': ([(0, 0), (-1, 0), (0, 1), (1, 0)], 7)}\r\ntypes_rotations = {'O': [[(0, 0), (-1, 0), (0, 1), (-1, 1)]],\r\n                   'I': [[(0, 0), (-1, 0), (-2, 0), (1, 0)], [(0, 0), (0, 1), (0, 2), (0, -1)]],\r\n                   'S': [[(0, 0), (1, 0), (0, 1), (-1, 1)], [(0, 0), (1, 0), (0, -1), (1, 1)]],\r\n                   'Z': [[(0, 0), (-1, 0), (0, 1), (1, 1)], [(0, 0), (1, 0), (1, -1), (0, 1)]],\r\n                   'L': [[(0, 0), (-1, 0), (-1, 1), (1, 0)], [(0, 0), (0, 1), (-1, -1), (0, -1)],\r\n                         [(0, 0), (-1, 0), (1, -1), (1, 0)], [(0, 0), (0, 1), (1, 1), (0, -1)]],\r\n                   'J': [[(0, 0), (-1, 0), (1, 1), (1, 0)], [(0, 0), (0, 1), (-1, 1), (0, -1)],\r\n                         [(0, 0), (-1, 0), (-1, -1), (1, 0)], [(0, 0), (0, 1), (1, -1), (0, -1)]],\r\n                   'T': [[(0, 0), (-1, 0), (0, 1), (1, 0)], [(0, 0), (0, -1), (0, 1), (-1, 0)],\r\n                         [(0, 0), (-1, 0), (0, -1), (1, 0)], [(0, 0), (0, -1), (0, 1), (1, 0)]]}\r\n\r\n\r\ndef load_image(name, color_key=None):\r\n    fullname = os.path.join('data', name)\r\n    try:\r\n        image = pygame.image.load(fullname)\r\n    except pygame.error as message:\r\n        print('Не удаётся загрузить:', name)\r\n        raise SystemExit(message)\r\n    image = image.convert_alpha()\r\n    if color_key is not None:\r\n        if color_key == -1:\r\n            color_key = image.get_at((0, 0))\r\n        image.set_colorkey(color_key)\r\n    return image\r\n\r\n\r\nclass Board:\r\n    # создание поля\r\n    def __init__(self, width, height):\r\n        self.width = width\r\n        self.height = height\r\n        self.board = [[0] * width for _ in range(height)]\r\n        # значения по умолчанию\r\n        self.left = 10\r\n        self.top = 10\r\n        self.cell_size = 30\r\n\r\n    # настройка внешнего вида\r\n    def set_view(self, left, top, cell_size):\r\n        self.left = left\r\n        self.top = top\r\n        self.cell_size = cell_size\r\n\r\n    def test_render(self, scree):\r\n        colors = [pygame.Color(\"Black\"), pygame.Color(\"Yellow\"), pygame.Color(\"Cyan\"), pygame.Color(\"Green\"),\r\n                  pygame.Color(\"Red\"), pygame.Color(\"Orange\"), pygame.Color(\"Blue\"), pygame.Color(\"Purple\")]\r\n        for y in range(self.height):\r\n            for x in range(self.width):\r\n                pygame.draw.rect(scree, colors[self.board[y][x]], (\r\n                    x * self.cell_size + self.left, y * self.cell_size + self.top, self.cell_size,\r\n                    self.cell_size))\r\n                pygame.draw.rect(scree, pygame.Color(\"white\"), (\r\n                    x * self.cell_size + self.left, y * self.cell_size + self.top, self.cell_size,\r\n                    self.cell_size), 1)\r\n\r\n    def change_board(self, list_, coords, num):\r\n        x, y = coords\r\n        for i in list_:\r\n            self.board[y + i[1]][x + i[0]] = num\r\n\r\n    def scan_down(self, list_, coords):\r\n        free_cubes = []\r\n        for i in list_:\r\n            if (i[0], i[1] + 1) not in list_:\r\n                free_cubes.append(i)\r\n        for i in free_cubes:\r\n            if coords[1] + i[1] + 1 == len(self.board):\r\n                return False\r\n            if self.board[coords[1] + i[1] + 1][coords[0] + i[0]] != 0:\r\n                return False\r\n        return True\r\n\r\n\r\nclass Figure:\r\n    def __init__(self):\r\n        self.name = random.choice(list(types_coords.keys()))\r\n        self.coords, self.color = types_coords[self.name]\r\n        self.x, self.y = 5, 1\r\n        self.Stop = False\r\n        self.num_rotation = 0\r\n        self.dx = 0\r\n        self.update()\r\n\r\n    def update(self, flag=False):\r\n        if board.scan_down(self.coords, (self.x, self.y)):\r\n            board.change_board(self.coords, (self.x, self.y), 0)\r\n            self.x += self.dx\r\n            self.dx = 0\r\n            if not flag:\r\n                self.y += 1\r\n            board.change_board(self.coords, (self.x, self.y), self.color)\r\n        else:\r\n            self.Stop = True\r\n\r\n    def Lose(self):\r\n        return False\r\n\r\n    def Rotate(self, num):\r\n        if board.scan_down(self.coords, (self.x, self.y)):\r\n            rotations = types_rotations[self.name]\r\n            board.change_board(self.coords, (self.x, self.y), 0)\r\n            self.num_rotation = (self.num_rotation + num) % (len(rotations))\r\n            self.coords = rotations[self.num_rotation]\r\n            board.change_board(self.coords, (self.x, self.y), self.color)\r\n\r\n    def Move(self, vector):\r\n        if vector == 'left':\r\n            self.dx -= 1\r\n        elif vector == 'right':\r\n            self.dx += 1\r\n        flag = True\r\n        self.update(flag)\r\n\r\n    def move_d(self):\r\n        pass\r\n\r\n\r\n\r\ndef Check_Board():\r\n    pass\r\n\r\n\r\ndef Create_Archive():\r\n    pass\r\n\r\n\r\ndef terminate():\r\n    pygame.quit()\r\n    sys.exit()\r\n\r\n\r\ndef start_screen():\r\n    intro_text = [\"УПРАВЛЕНИЕ\", \"\",\r\n                  \"Стрелки влево и вправо - перемещение фигуры влево-вправо\",\r\n                  \"Стрелка вверх - разворот фигуры по часовой стрелке\",\r\n                  \"Z - разворот фигуры против часовой стрелки\",\r\n                  \"Стрелка Вниз - опустить фигуру вниз на 1 клетку\",\r\n                  \"Пробел - опустить фигуру полностью\",\r\n                  \"Левый Shift - отложить фигуру на хранение\"]\r\n\r\n    fon = pygame.transform.scale(load_image('Start game.jpg'), (800, 950))\r\n    screen.blit(fon, (0, 0))\r\n    font = pygame.font.Font('data/F77 Minecraft.ttf', 18)\r\n    text_coord = 350\r\n    for line in intro_text:\r\n        string_rendered = font.render(line, True, pygame.Color('black'))\r\n        intro_rect = string_rendered.get_rect()\r\n        text_coord += 15\r\n        intro_rect.top = text_coord\r\n        intro_rect.x = 50\r\n        text_coord += intro_rect.height\r\n        screen.blit(string_rendered, intro_rect)\r\n\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            elif event.type == pygame.KEYDOWN or \\\r\n                    event.type == pygame.MOUSEBUTTONDOWN:\r\n                return\r\n        pygame.display.flip()\r\n        clock.tick(60)\r\n\r\n\r\nif __name__ == '__main__':\r\n    pygame.init()\r\n    size = (800, 950)\r\n    screen = pygame.display.set_mode(size)\r\n    board = Board(10, 24)\r\n    board.set_view(100, -120, 40)\r\n\r\n    running = True\r\n    clock = pygame.time.Clock()\r\n    pygame.time.set_timer(pygame.USEREVENT, 500)\r\n\r\n    start_screen()\r\n\r\n    Main_Figure = Figure()\r\n    Archive_Figure = Figure()\r\n    score = 0\r\n    fldown = False\r\n    while running:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                running = False\r\n            if event.type == pygame.USEREVENT and not Main_Figure.Stop:\r\n                Main_Figure.update()\r\n            elif event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_UP:\r\n                    Main_Figure.Rotate(1)\r\n                elif event.key == pygame.K_z:\r\n                    Main_Figure.Rotate(-1)\r\n                elif event.key == pygame.K_DOWN:\r\n                    Main_Figure.Move(\"down\")\r\n                elif event.key == pygame.K_LEFT:\r\n                    Main_Figure.Move(\"left\")\r\n                elif event.key == pygame.K_RIGHT:\r\n                    Main_Figure.Move(\"right\")\r\n                elif event.key == pygame.K_LSHIFT:\r\n                    Create_Archive()\r\n                elif event.key == pygame.K_SPACE:\r\n                    fldown = True\r\n            elif event.type == pygame.KEYUP:\r\n                if event.key == pygame.K_SPACE:\r\n                    fldown = False\r\n        if fldown:\r\n            if board.scan_down(Main_Figure.coords, (Main_Figure.x, Main_Figure.y)):\r\n                board.change_board(Main_Figure.coords, (Main_Figure.x, Main_Figure.y), 0)\r\n                Main_Figure.y += 1\r\n                board.change_board(Main_Figure.coords, (Main_Figure.x, Main_Figure.y), Main_Figure.color)\r\n\r\n        screen.fill((0, 0, 0))\r\n        if Main_Figure.Stop:\r\n            if not Main_Figure.Lose():\r\n                Check_Board()\r\n                Main_Figure = Figure()\r\n        board.test_render(screen)\r\n        pygame.draw.rect(screen, pygame.Color(\"black\"), (0, 0, 700, 40))\r\n        pygame.draw.rect(screen, pygame.Color(\"white\"), (520, 80, 240, 200), width=1)\r\n        pygame.draw.rect(screen, pygame.Color(\"white\"), (520, 360, 240, 200), width=1)\r\n        font = pygame.font.Font(\"data/F77 Minecraft.ttf\", 23)\r\n        string_rendered = font.render(\"Следующая фигура\", True, pygame.Color('white'))\r\n        screen.blit(string_rendered, pygame.Rect(520, 40, 0, 0))\r\n        string_rendered = font.render(\"Карман\", True, pygame.Color('white'))\r\n        screen.blit(string_rendered, pygame.Rect(600, 320, 0, 0))\r\n        clock.tick(60)\r\n        pygame.display.flip()\r\n    pygame.quit()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	
+++ b/main.py	
@@ -125,6 +125,9 @@
         flag = True
         self.update(flag)
 
+    def pocket(self):
+
+
     def move_d(self):
         pass
 
